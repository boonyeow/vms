package com.vms.service;

import com.vms.dto.*;
import com.vms.model.Account;
import com.vms.model.Field;
import com.vms.model.Form;
import com.vms.model.Workflow;
import com.vms.model.keys.FormCompositeKey;
import com.vms.repository.FormRepository;
import jakarta.persistence.EntityManager;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.rest.webmvc.ResourceNotFoundException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.*;
import java.util.stream.Collectors;

@Service
public class FormService {
    @Autowired
    private FormRepository formRepository;
    @Autowired
    private AccountService accountService;

    @Autowired
    private EntityManager entityManager;

    @Autowired
    private FieldService fieldService;

     public Form createForm(){
         FormCompositeKey fck = FormCompositeKey.builder().revisionNo(1).build();
         Form form = Form.builder()
                 .id(fck)
                 .name("Untitled Form")
                 .description("")
                 .isFinal(false)
                 .authorizedAccounts(new ArrayList<>())
                 .workflows(new HashSet<>())
                 .fields(new ArrayList<>())
                 .build();
         formRepository.saveWithAutoGeneratedId(form);
         return form;
     }

    public Form duplicateForm(FormCompositeKey fck){
         Form form = getFormByFck(fck);
         Integer currentRevisionNo = formRepository.findByFormId_Id(fck.getId()).stream()
                 .mapToInt(f -> f.getId().getRevisionNo())
                 .max()
                 .orElseThrow(() -> new RuntimeException("surprise"));
         fck.setRevisionNo(currentRevisionNo + 1);
         Form duplicatedForm = Form.builder()
                 .id(fck)
                 .name(form.getName())
                 .description(form.getDescription())
                 .isFinal(false)
                 .authorizedAccounts(new ArrayList<>())
                 .build();

         List<Field> duplicatedFields = fieldService.duplicateFields(form.getFields(), form);
         duplicatedForm.setFields(duplicatedFields);
         formRepository.save(duplicatedForm);
         return duplicatedForm;
    }

    @Transactional
    public void updateForm(FormCompositeKey fck, FormDto request){
         Form form = getFormByFck(fck);
         if(form.isFinal()){
             throw new RuntimeException("Final form cannot be updated.");
         } else {
             List<Field> currentFields = form.getFields();
             if(currentFields != null){
                 for (Field field : currentFields) {
                     System.out.println("hi");
                     deleteFieldWithEntityManager(field);
                 }
             }
         }

        if(request.getName() != null){
            form.setName(request.getName());
        }

        if(request.getDescription() != null){
            form.setDescription(request.getDescription());
        }

        if (!form.isFinal()){
            form.setFinal(request.isFinal());
        }

        if(request.getFields() != null) {
            System.out.println("entering here - line 71");
            List<FieldRequestDto>  fieldRequestDtoList = request.getFields();
            List<Field> newFields = new ArrayList<>();
            for(FieldRequestDto fieldRequestDto: fieldRequestDtoList){
                Field field = fieldService.createField(fieldRequestDto, form);
                newFields.add(field);
            }
            form.setFields(newFields);
        }

        List<Long> authorizedAccountIds = request.getAuthorizedAccountIds();

        if(authorizedAccountIds != null && !authorizedAccountIds.isEmpty()){
            form.setAuthorizedAccounts(accountService.getAccountsFromIds(authorizedAccountIds));
        }

         formRepository.save(form);
    }
    public void deleteFieldWithEntityManager(Field field) {
        entityManager.remove(field);
    }

     public void updateFormAuthorizedAccounts(FormCompositeKey fck, List<String> emails){
        Form form = getFormByFck(fck);
         List<Account> authorizedAccounts = new ArrayList<>();
         for (String email: emails) {
             Account account = accountService.getAccountByEmail(email)
                     .orElseThrow(() -> new ResourceNotFoundException("Account " + email + " not found"));
             authorizedAccounts.add(account);
         }
         form.setAuthorizedAccounts(authorizedAccounts);
         formRepository.saveWithAutoGeneratedId(form);
     }

    public void deleteForm(FormCompositeKey fck){
         Form form = getFormByFck(fck);
         if(!form.getWorkflows().isEmpty()){
             throw new RuntimeException("Unable to delete form due to referential violation");
         }
        formRepository.delete(form);
    };

     public List<FormResponseDto> getAllFormDto(){
         Iterable<Form> forms = formRepository.findAll();
         List<FormResponseDto> formResponses = new ArrayList<>();
         List<AccountDto> authorizedAccounts = new ArrayList<>();
         for (Form form: forms){
             List<AccountDto> accountDtoList = accountService.getAccountDtoList(form.getAuthorizedAccounts());
             for (AccountDto accountDto: accountDtoList){
                authorizedAccounts.add(accountDto);
             }
             List<Long> workflowIds = getWorkflowIds(form.getWorkflows());

            FormResponseDto formResponseDto = FormResponseDto.builder()
                    .id(form.getId())
                    .name(form.getName())
                    .description(form.getDescription())
                    .isFinal(form.isFinal())
                    .authorizedAccounts(accountService.getAccountDtoList(form.getAuthorizedAccounts()))
                    .workflows(workflowIds)
                    .build();
             formResponses.add(formResponseDto);
         }
         return formResponses;
     }

     public List<Long> getWorkflowIds(Set<Workflow> workflows){
         List<Long> workflowIds = new ArrayList<>();
         for(Workflow workflow : workflows){
             workflowIds.add(workflow.getId());
         }
         return workflowIds;
     }

    public List<FormResponseDto> getFormDtoByState(Boolean state){
        Iterable<Form> forms = formRepository.findFormByState(state);
        List<FormResponseDto> formResponses = new ArrayList<>();
        List<AccountDto> authorizedAccounts = new ArrayList<>();
        for (Form form: forms){
            List<AccountDto> accountDtoList = accountService.getAccountDtoList(form.getAuthorizedAccounts());
            for (AccountDto accountDto: accountDtoList){
                authorizedAccounts.add(accountDto);
            }
            List<Long> workflowIds = getWorkflowIds(form.getWorkflows());
            FormResponseDto formResponseDto = FormResponseDto.builder()
                    .id(form.getId())
                    .name(form.getName())
                    .description(form.getDescription())
                    .isFinal(form.isFinal())
                    .authorizedAccounts(accountService.getAccountDtoList(form.getAuthorizedAccounts()))
                    .workflows(workflowIds)
                    .build();
            formResponses.add(formResponseDto);
        }
        return formResponses;
    }

    public FormResponseDto getFormDtoByFck(FormCompositeKey fck){
        Form form = getFormByFck(fck);

        List<Long> workflowIds = getWorkflowIds(form.getWorkflows());
        return FormResponseDto.builder()
                .id(form.getId())
                .name(form.getName())
                .description(form.getDescription())
                .isFinal(form.isFinal())
                .authorizedAccounts(accountService.getAccountDtoList(form.getAuthorizedAccounts()))
                .workflows(workflowIds)
                .build();
    }

    public Form getFormByFck(FormCompositeKey fck){
        return formRepository.findById(fck)
                .orElseThrow(() -> new RuntimeException("Form not found")
                );
    }



    public List<FieldResponseDto> getFieldsByFck(FormCompositeKey fck){
        Form form = getFormByFck(fck);
        List<Field> fields = form.getFields();
        List<FieldResponseDto> fieldResponseDtos = new ArrayList<>();
        for (Field field: fields){
            Map<String, Long> nextFieldsId = field.getOptions().entrySet().stream().collect(Collectors.toMap(Map.Entry::getKey, e -> e.getValue().getId()));
            if (nextFieldsId.isEmpty()){
                // get optionsAlternativeHolder and convert it to map <String, Long>
                List<String> optionsAlternativeHolder = field.getOptionsAlternativeHolder();
                if (optionsAlternativeHolder != null){
                    nextFieldsId = new HashMap<>();
                    for (String option : optionsAlternativeHolder) {
                        nextFieldsId.put(option, null);
                    }
                    System.out.println(nextFieldsId);
                    System.out.println("FUCKUASUDKCNK");

                }
            }
            fieldResponseDtos.add(convertToDto(field, nextFieldsId));
        }
        return fieldResponseDtos;
    }

    private FieldResponseDto convertToDto(Field field, Map<String, Long> nextFieldsId){
        if (nextFieldsId.isEmpty()){
            return FieldResponseDto.builder()
                    .id(field.getId())
                    .name(field.getName())
                    .helpText(field.getHelpText())
                    .isRequired(field.getIsRequired())
                    .fieldType(field.getFieldType())
                    .regexId(field.getRegex() == null ? null : field.getRegex().getId())
//                    .formCompositeKey(field.getForm().getId())
                    .build();
        }
        return FieldResponseDto.builder()
                .id(field.getId())
                .name(field.getName())
                .helpText(field.getHelpText())
                .isRequired(field.getIsRequired())
                .fieldType(field.getFieldType())
                .nextFieldsId(nextFieldsId)
                .regexId(field.getRegex() == null ? null : field.getRegex().getId())
//                .formCompositeKey(field.getForm().getId())
                .build();
    }
    private Map<String, Long> getNextFieldsIdFromMap(Map<String, Field> nextFieldsMap){
        Map<String, Long> nextFieldsId = new HashMap<>();
        for(Map.Entry<String, Field> entry : nextFieldsMap.entrySet()){
            nextFieldsId.put(entry.getKey(), entry.getValue().getId());
        }
        return nextFieldsId;
    }

    public FormCompositeKey createAndGetFck(){
         Form form = createForm();
         return form.getId();
    }

    public FormCompositeKey duplicateAndGetFck(FormCompositeKey fck){
         Form form = duplicateForm(fck);
         return form.getId();
    }

    public FormResponseDto getLatestForm(Long id){
         Form form = formRepository.findLatestForm(id);
         List<AccountDto> authorizedAccountDtoList = accountService.getAccountDtoList(form.getAuthorizedAccounts());
         List<FieldResponseDto> fieldResponseDtoList = fieldService.getFieldResponseDtoList(form.getFields());
         FormResponseDto frDto = FormResponseDto.builder()
                 .name(form.getName())
                 .description(form.getDescription())
                 .isFinal(form.isFinal())
                 .authorizedAccounts(accountService.getAccountDtoList(form.getAuthorizedAccounts()))
                 .fields(fieldResponseDtoList)
                 .build();
         return frDto;
    }
}
